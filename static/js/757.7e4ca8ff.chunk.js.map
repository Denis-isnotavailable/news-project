{"version":3,"file":"static/js/757.7e4ca8ff.chunk.js","mappings":"wPAiDA,EA5CuB,SAAC,GAA2B,EAA1BA,UAA2B,IAAD,IAAfC,KAAAA,OAAe,MAAR,GAAQ,EAC/C,GAAgCC,EAAAA,EAAAA,UAAS,IAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KACA,GAAgDF,EAAAA,EAAAA,WAAS,GAAzD,eAAOG,EAAP,KAAyBC,EAAzB,KAgBA,OAdAC,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAS,mCAAG,qGAEQC,EAAAA,EAAAA,IAAcR,GAFtB,OAERS,EAFQ,OAIdN,EAAYM,GAJE,2CAAH,qDAOfF,GAEH,GAAE,KAKC,gCAEsB,IAAhBP,EAAKU,QACH,oBACIC,KAAK,SACLC,QAAS,kBAAMP,GAAoB,SAAAQ,GAAI,OAAKA,CAAL,GAA9B,EAFb,8BAIsBb,EAAKU,OAJ3B,QAOA,8CAEFN,IACE,wBACIF,EAASY,KAAI,SAAAC,GACT,OAAQ,wBAAmBA,EAAIC,MAAdD,EAAIE,GACxB,QAOpB,E,kBC7CYC,E,OAAiBC,GAAAA,IAAH,8MC2D3B,EArDiB,WAAO,IAAD,EACXF,GAAOG,EAAAA,EAAAA,MAAPH,GACR,GAAwBhB,EAAAA,EAAAA,UAAS,CAAC,GAAlC,eAAOoB,EAAP,KAAaC,EAAb,KACA,GAAgCrB,EAAAA,EAAAA,UAAS,IAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KAEMoB,EADO,IAAIC,KAAKH,EAAKI,KAAO,OAChBC,WAAWC,MAAM,KAAKC,MAAM,EAAG,GAkBjD,OAhBAtB,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAS,mCAAG,uGACKsB,EAAAA,EAAAA,GAAaZ,GADlB,cACRa,EADQ,iBAEQtB,EAAAA,EAAAA,IAAcsB,EAAK9B,MAF3B,OAERS,EAFQ,OAGda,EAAQQ,GACR3B,EAAYM,GAJE,2CAAH,qDAOfF,GAEH,GAAE,IAEHwB,QAAQC,IAAI9B,IAKR,UAACgB,EAAD,YACI,wBAAKG,EAAKY,SACV,cAAGC,KAAMb,EAAKc,IAAd,SAAoBd,EAAKc,OACzB,uCAAeZ,EAAKa,KAAK,SACzB,oCAAYf,EAAKgB,OACjB,uCAAehB,EAAKrB,KAAL,UAAYqB,EAAKrB,YAAjB,aAAY,EAAWU,OAAS,EAA/C,QACA,wBACKR,EAASY,KAAI,SAAAwB,GACV,IACMf,EADO,IAAIC,KAAKc,EAAQb,KAAO,OACnBC,WAAWC,MAAM,KAAKC,MAAM,EAAG,GACjD,OACI,2BACI,4BACI,oCAAYU,EAAQD,OACpB,uBAAId,EAAKa,KAAK,WAElB,uBAAIE,EAAQtB,QACZ,yBAAOsB,EAAQC,MAAQD,EAAQE,WAAY,yDAE3C,SAAC,EAAD,CAAgBzC,UAAWuC,EAAQrB,GAAIjB,KAAI,OAAEsC,QAAF,IAAEA,OAAF,EAAEA,EAAStC,SARjDsC,EAAQrB,GAYxB,QAIhB,C","sources":["components/DiscussionArea/DiscussionArea.jsx","pages/PostPage/PostPage.styled.jsx","pages/PostPage/PostPage.jsx"],"sourcesContent":["import { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport { fetchComments } from \"redux/operations\";\n\n\nconst DiscussionArea = ({commentId, kids = []}) => {\n    const [comments, setComments] = useState([]);\n    const [isDiscussionOpen, setIsDiscussionOpen] = useState(false);\n\n    useEffect(() => {\n        const fetchPost = async () => {\n            // const data = await fetchOnePost(commentId);\n            const comData = await fetchComments(kids);\n            // setPost(data)\n            setComments(comData);\n        }\n\n        fetchPost();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    // console.log(comments);\n\n    return (\n        <>\n\n            { kids.length !== 0 ?\n                <button\n                    type=\"button\"\n                    onClick={() => setIsDiscussionOpen(prev => !prev)}\n                >\n                    open discussion ({kids.length})\n                </button>\n                :\n                <p>no discussion yet</p>\n            }\n            {!isDiscussionOpen ||\n                <ul>{\n                    comments.map(com => {\n                        return (<li key={com.id}>{ com.text }</li>)\n                    })\n                }</ul>\n            }\n            \n        </>\n        \n    );\n}\n\nexport default DiscussionArea;","import styled from \"styled-components\";\n\nexport const PostPageStyled = styled.div`\n    padding: 40px;\n\n    div{\n        display: flex;\n        justify-content: space-between;\n        margin-bottom: 8px;\n    }\n\n    li {\n        margin-bottom: 16px;\n    }\n`;","import DiscussionArea from \"components/DiscussionArea/DiscussionArea\";\nimport { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { fetchComments, fetchOnePost } from \"redux/operations\";\nimport { PostPageStyled } from \"./PostPage.styled\";\n\n\nconst PostPage = () => {\n    const { id } = useParams();\n    const [post, setPost] = useState({});\n    const [comments, setComments] = useState([]);\n    const time = new Date(post.time + 1500000000000);\n    const date = time.toString().split(' ').slice(1, 5);    \n\n    useEffect(() => {\n        const fetchPost = async () => {\n            const data = await fetchOnePost(id);\n            const comData = await fetchComments(data.kids);\n            setPost(data)\n            setComments(comData);\n        }\n\n        fetchPost();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    console.log(comments);\n    // console.log(post);\n    \n\n    return (\n        <PostPageStyled>\n            <h2>{post.title}</h2>\n            <a href={post.url}>{post.url}</a>\n            <p>Post date: {date.join(' ')}</p>\n            <p>Author: {post.by}</p>\n            <h3>Comments ({post.kids ? post.kids?.length : 0})</h3>            \n            <ul>\n                {comments.map(comment => {\n                    const time = new Date(comment.time + 1500000000000);\n                    const date = time.toString().split(' ').slice(1, 5);\n                    return (\n                        <li key={comment.id}>\n                            <div>\n                                <p>Author: {comment.by}</p>\n                                <p>{date.join(' ')}</p>\n                            </div>\n                            <p>{comment.text}</p>\n                            <p>{ !(comment.dead || comment.deleted) || <>comment was deleted</>  }</p>                            \n\n                            <DiscussionArea commentId={comment.id} kids={comment?.kids} />\n                            \n                        </li>\n                    );\n                })}\n            </ul>\n        </PostPageStyled>\n    );\n}\n\nexport default PostPage;"],"names":["commentId","kids","useState","comments","setComments","isDiscussionOpen","setIsDiscussionOpen","useEffect","fetchPost","fetchComments","comData","length","type","onClick","prev","map","com","text","id","PostPageStyled","styled","useParams","post","setPost","date","Date","time","toString","split","slice","fetchOnePost","data","console","log","title","href","url","join","by","comment","dead","deleted"],"sourceRoot":""}